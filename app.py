import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# Definindo os resultados das m√©tricas
metrics = {
    "M√©trica": ["Acur√°cia", "KS", "Gini"],
    "Base de Valida√ß√£o": [0.9133, 0.3798, 0.5071],
    "Base Out-of-Time": [0.9130, 0.3866, 0.5119]
}

# Criando um DataFrame para exibir as m√©tricas
df_metrics = pd.DataFrame(metrics)

# Configurando a p√°gina do Streamlit
st.set_page_config(page_title="Avalia√ß√£o do Modelo", layout="wide")

# T√≠tulo da aplica√ß√£o
st.title("üìä Avalia√ß√£o do Modelo de Regress√£o Log√≠stica")
st.markdown("Este dashboard apresenta as m√©tricas de avalia√ß√£o do modelo, incluindo Acur√°cia, KS e Gini, para as bases de valida√ß√£o e out-of-time.")

# Exibindo a tabela de m√©tricas
st.subheader("Tabela de M√©tricas")
st.dataframe(df_metrics, use_container_width=True)

# Gr√°fico de Acur√°cia, KS e Gini
st.subheader("Gr√°ficos Comparativos das M√©tricas")

# Fun√ß√£o para criar gr√°ficos de barras comparativos
def create_comparison_chart(metric_name, validation_values, oot_values, title, y_title):
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=metric_name,
        y=validation_values,
        name="Base de Valida√ß√£o",
        marker_color='blue'
    ))
    fig.add_trace(go.Bar(
        x=metric_name,
        y=oot_values,
        name="Base Out-of-Time",
        marker_color='orange'
    ))
    fig.update_layout(
        title=title,
        xaxis_title="M√©trica",
        yaxis_title=y_title,
        barmode="group",
        template="plotly_white",
        legend=dict(title="Bases")
    )
    return fig

# Criando gr√°ficos para cada m√©trica
st.plotly_chart(create_comparison_chart(
    df_metrics["M√©trica"], 
    df_metrics["Base de Valida√ß√£o"], 
    df_metrics["Base Out-of-Time"], 
    "Compara√ß√£o de Acur√°cia", 
    "Acur√°cia"
), use_container_width=True)

st.plotly_chart(create_comparison_chart(
    df_metrics["M√©trica"], 
    df_metrics["Base de Valida√ß√£o"], 
    df_metrics["Base Out-of-Time"], 
    "Compara√ß√£o de KS", 
    "KS"
), use_container_width=True)

st.plotly_chart(create_comparison_chart(
    df_metrics["M√©trica"], 
    df_metrics["Base de Valida√ß√£o"], 
    df_metrics["Base Out-of-Time"], 
    "Compara√ß√£o de Gini", 
    "Gini"
), use_container_width=True)

# Conclus√£o
st.markdown("""
### Conclus√£o
- Os gr√°ficos e a tabela acima permitem comparar as m√©tricas de desempenho do modelo nas bases de valida√ß√£o e out-of-time. Isso auxilia na avalia√ß√£o da robustez e estabilidade do modelo.
- O modelo parece ser bem calibrado, com boa performance nas duas bases (treinamento/valida√ß√£o e out-of-time). Ele tem um bom poder discriminante (com KS e Gini em torno de 0.4-0.5) e est√° performando consistentemente em diferentes subconjuntos dos dados. Os resultados s√£o muito s√≥lidos.
- Com as vari√°veis selecionadas podemos calcular, com mais previsibilidade, os riscos de inadimpl√™ncia.
- Com isso, podemos sugerir outras abordagens e possibilidades para diminuir o risco de inandimpl√™ncia e trazer mais clientes com maior poder de cr√©dito.
""")

# by Victor Resende
st.markdown("---")
st.write("by üìä **Victor Resende**")